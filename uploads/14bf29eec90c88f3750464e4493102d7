
import java.io.*;

public class ArraySums {


/**********************************************************************************/
/** arraySum
  * Return sum of the integers in array
  **/
 public static int arraySum(int [] array) {
   return -1;
}
/**********************************************************************************/


/**********************************************************************************/
/** rowSums
  * Return an array of integers that correspond to the sums for
  * each row in the 2D Array.  Assume that array2D is in row major form
  * thus array2D[r][c]  references row r and column c
  * Your solution must make use of the arraySum method
  **/
public static int[] rowSums(int [][]array2D) {

 return null;
}
/**********************************************************************************/

/**********************************************************************************/
/** isDiverse
  * Returns true is the array2D is diverse
  * Diverse means that each row sums to a different value
  *  Your solution must make use of rowSums method
  **/
public static boolean isDiverse(int [][]array2D) {
 return false;
}
/**********************************************************************************/


public static int ROW = 100;
public static int COL = 100;

 public static void main(String []args) {
    int [][]array2D = generateDiverseArray();
    int [][]array2DNotDiverse = generatePlainArray();

    int []array = generate1DArray();
    
     if (arraySum(array) == (ROW-1)*(ROW)/2)
         System.out.println("Passed ArraySum");
     else 
          System.out.println("Failed ArraySum");

    if (isDiverse(array2D)) 
	System.out.println("Passed IsDiverse with Diverse");
    else
	System.out.println("Failed isDiverse with Diverse");

    if (isDiverse(array2D)) 
	System.out.println("Failed isDiverse when not Diverse");
    else
	System.out.println("Passed IsDiverse when not Diverse");


}


/**********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***** DO NOT LOOK AT CODE BEYOND THIS POINT****
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************
*/

public static int[][] generateDiverseArray() {
   int[][]array = new int[ROW][COL];
   for (int i = 0;i<ROW;i++)
      for(int j = 0;j<COL;j++) 
	array[i][j] = i*ROW+j;
  return array;
}

public static int[][] generatePlainArray() {
   int[][]array = new int[ROW][COL];
   for (int i = 0;i<ROW;i++)
      for(int j = 0;j<COL;j++) 
	if (i == 0 || i== ROW - 1)
	     array[i][j] = 7;
	else 
	     array[i][j] = i*ROW+j;
   return array;
}

public static int[]generate1DArray() {
   int []array  = new int[ROW];
  for (int i=0;i<ROW;i++)
      array[i] = i;
  return array;
}
}